name: Post updated articles to X

on:
  push:
    paths:
      - "articles/*.md"  # Triggers on changes to .md files in articles directory

jobs:
  post_to_x:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests requests-oauthlib

      - name: Extract titles and URLs from updated articles
        id: extract_posts
        run: |
          # Get list of updated .md files in the articles directory
          UPDATED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^articles/.*\.md')
          
          # Extract title and URL for each updated file
          for FILE in $UPDATED_FILES; do
            # Remove .md extension from filename to get page-title
            PAGE_TITLE=$(basename "$FILE" .md)
            URL="${{ secrets.BASE_URL }}/$PAGE_TITLE"
            
            # Extract title field from file content
            TITLE=$(grep '^title:' "$FILE" | sed 's/title: "\(.*\)"/\1/')

            # Format the tweet content
            TWEET_CONTENT="${TITLE}という記事を作成しました！\n${URL}"

            # Save each tweet content as an environment variable
            echo "TWEET_CONTENT_$PAGE_TITLE=$TWEET_CONTENT" >> $GITHUB_ENV
          done

      - name: Post each article to X
        env:
          API_KEY: ${{ secrets.API_KEY }}
          API_SECRET_KEY: ${{ secrets.API_SECRET_KEY }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
        run: |
          python <<EOF
import os
import requests
from requests_oauthlib import OAuth1

# Set up OAuth1 authentication
auth = OAuth1(
    os.getenv("API_KEY"),
    os.getenv("API_SECRET_KEY"),
    os.getenv("ACCESS_TOKEN"),
    os.getenv("ACCESS_TOKEN_SECRET")
)

# Post each tweet content found in environment variables
for key, value in os.environ.items():
    if key.startswith("TWEET_CONTENT_"):
        tweet_content = value
        url = "https://api.twitter.com/2/tweets"
        payload = {"text": tweet_content}

        response = requests.post(url, auth=auth, json=payload)

        if response.status_code == 201:
            print(f"Successfully posted to X: {tweet_content}")
        else:
            print(f"Failed to post to X: {response.status_code}")
            print(response.json())
EOF
